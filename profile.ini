;
; Example layout profile.
; Note that these settings can appear inside another config file, as long
; as the format remains the same.
;
; The goal of this profile is to define the layout of an application's
; widgets in a flexible manner, which can be loaded at run-time instead
; of being compiled into the application.  The layout can be used for any
; screen size, but is 


; The format of this file is as follows:

; GROUP: layout
; REQUIRED
; 
; This group defines the layout's overall grid dimensions, for example: 
; a 16x9 grid will make square grid cells on a widescreen (16x9) display.
; This can help keep widgets looking proportional on different screen
; resolutions.  Each screen resolution then would need its own profile.ini
; file to define the layout.
[layout]
width = 16
height = 9

; GROUP: layout-items
; REQUIRED
;
; This group contains all the information for an application's layout
[layout-items]
; This is the number of items managed by this layout, and is also the length
; of the array below.
;size = 5

; GROUP: layout-items/[item number, starting at 1]
; REQUIRED
; 
; Each item in the layout should have its own unique array number.
; Numbers are used here because QSettings has a very clean interface for
; reading arrays of this format from files, where using the widget's name
; or some other identifier would require more logic to process.  Thus this
; approach is much more generic.
;
; This example item will take up the 2x2 space on the grid at the top-left
; of the application.
[layout-items/1]
; A name to help identify this widget.  Not necessary, but can help prevent
; ambiguity by providing a method to associate this profile widget item
; with a widget in the application code.
name = SquareWidget
; The starting row and column (zero-based) for this widget.  Values should
; be in the range [0, <layout/width>] or [0, <layout/height>].
; Note that cells in the grid are indexed from the top left corner.
row = 0
col = 0
; How many rows/columns should this widget span?  Values should not make any; widget exceed the layout/<width,height> values defined above.
rowSpan = 2
colSpan = 2
; Should this widget be initially visible?
; Possible values: 
;  True:  1, true
;  False: 0, false
; This visibility allows defining widget layouts for objects that will 
; become visible based on application logic, user input, etc.
visible = true

; This example item will create a vertical button bar just below item 1,
; spanning two columns and 7 rows (thus extending to the bottom of the 
; screen on our 16x9 grid).
[layout-items/2]
name = VerticalButtons
row = 2
col = 0
rowSpan = 7
colSpan = 2
visible = true

; This example item will be a generic widget taking up the rest of the 
; screen (14 cells wide, 9 cells tall).
[layout-items/3]
name = ContentWidget
row = 0
col = 2
rowSpan = 14
colSpan = 9
visible = true

; If the application has a set of widgets that can be swapped out for 
; another set, you can provide their dimensions as with any other widget, 
; with the "visible" value set to false, then use a button or some other
; logic to swap the widgets (see the LayoutManager class' swapWidgets() 
; function for more details).
;
; The following two items (4 and 5) provide an alternate man content widget
; and right sidebar.
[layout-items/4]
name = ContentWidgetAlternate
row = 0
col = 2
rowSpan = 9
colSpan = 8
visible = false

[layout-items/5]
name = ContentWidgetRightSidebar
row = 0
col = 10
rowSpan = 9
colSpan = 6
visible = false
